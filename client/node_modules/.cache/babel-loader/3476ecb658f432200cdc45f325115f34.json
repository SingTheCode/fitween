{"ast":null,"code":"import { JWT_EXPIRY_TIME } from '../constants/config';\nimport { getRefreshToken, removeRefreshToken, setRefreshToken } from '../storage/Cookie';\nimport API from '../api';\nimport * as authApi from '../api/auth';\nexport const onRefresh = async () => {\n  const body = {\n    refreshToken: getRefreshToken()\n  };\n\n  try {\n    const {\n      refreshToken,\n      accessToken\n    } = await authApi.refresh(body);\n    onLoginSuccess(refreshToken, accessToken);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const onLoginSuccess = (refreshToken, accessToken) => {\n  setRefreshToken(refreshToken);\n  API.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n  setTimeout(onRefresh, JWT_EXPIRY_TIME - 60 * 1000);\n};\nexport const onLogout = async () => {\n  const body = {\n    refreshToken: getRefreshToken()\n  };\n\n  try {\n    await authApi.logout(body);\n    removeRefreshToken();\n    API.defaults.headers.common['Authorization'] = '';\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const onDeleteUser = async () => {\n  try {\n    await authApi.deleteUser();\n    removeRefreshToken();\n    API.defaults.headers.common['Authorization'] = '';\n  } catch (err) {\n    throw err;\n  }\n};","map":{"version":3,"names":["JWT_EXPIRY_TIME","getRefreshToken","removeRefreshToken","setRefreshToken","API","authApi","onRefresh","body","refreshToken","accessToken","refresh","onLoginSuccess","err","console","log","defaults","headers","common","setTimeout","onLogout","logout","onDeleteUser","deleteUser"],"sources":["/Users/singco/dev/projects/S07P12C104/client/src/utils/auth.js"],"sourcesContent":["import { JWT_EXPIRY_TIME } from '../constants/config';\nimport { getRefreshToken, removeRefreshToken, setRefreshToken } from '../storage/Cookie';\nimport API from '../api';\nimport * as authApi from '../api/auth';\n\nexport const onRefresh = async () => {\n\tconst body = {\n\t\trefreshToken: getRefreshToken(),\n\t};\n\n\ttry {\n\t\tconst { refreshToken, accessToken } = await authApi.refresh(body);\n\t\tonLoginSuccess(refreshToken, accessToken);\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n};\n\nexport const onLoginSuccess = (refreshToken, accessToken) => {\n\tsetRefreshToken(refreshToken);\n\tAPI.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n\n\tsetTimeout(onRefresh, JWT_EXPIRY_TIME - 60 * 1000);\n};\n\nexport const onLogout = async () => {\n\tconst body = {\n\t\trefreshToken: getRefreshToken(),\n\t};\n\n\ttry {\n\t\tawait authApi.logout(body);\n\t\tremoveRefreshToken();\n\t\tAPI.defaults.headers.common['Authorization'] = '';\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n};\n\nexport const onDeleteUser = async () => {\n\ttry {\n\t\tawait authApi.deleteUser();\n\t\tremoveRefreshToken();\n\t\tAPI.defaults.headers.common['Authorization'] = '';\n\t} catch (err) {\n\t\tthrow err;\n\t}\n};\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,qBAAhC;AACA,SAASC,eAAT,EAA0BC,kBAA1B,EAA8CC,eAA9C,QAAqE,mBAArE;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,aAAzB;AAEA,OAAO,MAAMC,SAAS,GAAG,YAAY;EACpC,MAAMC,IAAI,GAAG;IACZC,YAAY,EAAEP,eAAe;EADjB,CAAb;;EAIA,IAAI;IACH,MAAM;MAAEO,YAAF;MAAgBC;IAAhB,IAAgC,MAAMJ,OAAO,CAACK,OAAR,CAAgBH,IAAhB,CAA5C;IACAI,cAAc,CAACH,YAAD,EAAeC,WAAf,CAAd;EACA,CAHD,CAGE,OAAOG,GAAP,EAAY;IACbC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACA;AACD,CAXM;AAaP,OAAO,MAAMD,cAAc,GAAG,CAACH,YAAD,EAAeC,WAAf,KAA+B;EAC5DN,eAAe,CAACK,YAAD,CAAf;EACAJ,GAAG,CAACW,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4B,eAA5B,IAAgD,UAASR,WAAY,EAArE;EAEAS,UAAU,CAACZ,SAAD,EAAYN,eAAe,GAAG,KAAK,IAAnC,CAAV;AACA,CALM;AAOP,OAAO,MAAMmB,QAAQ,GAAG,YAAY;EACnC,MAAMZ,IAAI,GAAG;IACZC,YAAY,EAAEP,eAAe;EADjB,CAAb;;EAIA,IAAI;IACH,MAAMI,OAAO,CAACe,MAAR,CAAeb,IAAf,CAAN;IACAL,kBAAkB;IAClBE,GAAG,CAACW,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4B,eAA5B,IAA+C,EAA/C;EACA,CAJD,CAIE,OAAOL,GAAP,EAAY;IACbC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACA;AACD,CAZM;AAcP,OAAO,MAAMS,YAAY,GAAG,YAAY;EACvC,IAAI;IACH,MAAMhB,OAAO,CAACiB,UAAR,EAAN;IACApB,kBAAkB;IAClBE,GAAG,CAACW,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4B,eAA5B,IAA+C,EAA/C;EACA,CAJD,CAIE,OAAOL,GAAP,EAAY;IACb,MAAMA,GAAN;EACA;AACD,CARM"},"metadata":{},"sourceType":"module"}