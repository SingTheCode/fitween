{"ast":null,"code":"var _jsxFileName = \"/Users/singco/dev/projects/S07P12C104/client/src/pages/Chat/ChatRoom.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\n/** @jsxImportSource @emotion/react */\n\nimport { css } from '@emotion/react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { v4 as uuid } from 'uuid';\nimport TopNavigation from '../../components/Common/TopNavigation/TopNavigation';\nimport { ReactComponent as SendIcon } from '../../assets/send.svg';\nimport colors from '../../constants/colors';\nimport commonStyle from '../../constants/commonStyle';\nimport { useGlobalContext } from '../../contexts/GlobalContext';\nimport Main from '../../components/Common/Main/Main';\nimport Message from '../../components/Chat/Message';\nimport Date from '../../components/Chat/Date';\nimport * as ChatApi from '../../api/chat';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"@emotion/react/jsx-dev-runtime\";\nlet stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const inputRef = useRef(null);\n  const [message, setMessage] = useState('');\n  const {\n    state\n  } = useLocation();\n  const [roomId, setRoomId] = useState(state.roomId);\n  const [receiverId, setReceiverId] = useState(state.receiverId); // todo: 유저정보 컨텍스트에서 가져와야함.\n\n  const [userId, setUserId] = useState('myId');\n  const [chats, setChats] = useState([]);\n  const navigate = useNavigate();\n\n  const sendChatHandler = () => {\n    console.log('채팅전송개발중');\n\n    if (stompClient) {\n      const chatMessage = {\n        senderId: userId,\n        receiverId: receiverId,\n        roomId: roomId,\n        message\n      };\n      stompClient.send(`/app/chat/message`, {}, JSON.stringify(chatMessage));\n    }\n\n    setMessage('');\n    inputRef.current.focus();\n  };\n\n  const onMessageReceived = payload => {\n    let payloadData = JSON.parse(payload.body);\n    chats.push(payloadData);\n    setChats([...chats]);\n  };\n\n  const onError = err => {\n    console.log(err);\n    throw err;\n  };\n\n  const onConnected = () => {\n    console.log('연결완료');\n    stompClient.subscribe(`/topic/chat/room/${roomId}`, onMessageReceived);\n  };\n\n  const {\n    setHasBottom\n  } = useGlobalContext();\n  useEffect(() => {\n    setHasBottom(true);\n    return () => {\n      setHasBottom(false);\n    };\n  }, []); // roomId에 따라 채팅로그 받아오기\n\n  useEffect(() => {\n    const fetchChatLogs = async () => {\n      try {\n        const data = await ChatApi.getChagLogs(roomId);\n        setChats(data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    const findRoom = async () => {\n      try {\n        const {\n          roomId\n        } = await ChatApi.findRoom(receiverId);\n        setRoomId(roomId);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (roomId) {\n      fetchChatLogs();\n    } else {\n      findRoom();\n    }\n  }, [roomId]); // 소켓연결\n\n  useEffect(() => {\n    let Sock = new SockJS(process.env.REACT_APP_SOCKET_URI);\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n    return () => {\n      if (stompClient.connected) stompClient.disconnect();\n    };\n  }, []);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(TopNavigation, {\n      backClick: true,\n      onBackClick: () => navigate(-1),\n      centerContent: receiverId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }, this), _jsxDEV(Main, {\n      children: chats.map(chat => _jsxDEV(Message, {\n        message: chat.message,\n        isMine: chat.senderId === userId,\n        sendTime: chat.sendTime,\n        isRead: chat.isRead\n      }, uuid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 4\n    }, this), _jsxDEV(\"div\", {\n      className: \"input-wrapper\",\n      css: css`\n\t\t\t\t\tposition: fixed;\n\t\t\t\t\tbottom: 0;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tmax-width: 1200px;\n\t\t\t\t\theight: ${commonStyle.bottomHeaderHeight};\n\t\t\t\t\tbox-shadow: 0 -0.2px ${colors.text};\n\t\t\t\t\tbackground-color: ${colors.white};\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: center;\n\t\t\t\t\talign-items: center;\n\t\t\t\t`,\n      children: [_jsxDEV(\"input\", {\n        ref: inputRef,\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        type: \"text\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        css: css`\n\t\t\t\t\t\twidth: 90%;\n\t\t\t\t\t\tpadding: 10px 45px 10px 10px;\n\t\t\t\t\t\tborder: 2px solid ${colors.text};\n\t\t\t\t\t\tfont-size: 16px;\n\t\t\t\t\t\tfont-family: 'Regular';\n\t\t\t\t\t\tborder-radius: 31px;\n\t\t\t\t\t\t&:active,\n\t\t\t\t\t\t&:focus {\n\t\t\t\t\t\t\toutline: none;\n\t\t\t\t\t\t}\n\t\t\t\t\t`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }, this), _jsxDEV(\"div\", {\n        css: css`\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tright: 5%;\n\t\t\t\t\t\tpadding: 10px;\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\tjustify-content: center;\n\t\t\t\t\t\talign-items: center;\n\t\t\t\t\t`,\n        children: _jsxDEV(SendIcon, {\n          onClick: sendChatHandler,\n          width: \"28\",\n          height: \"28\",\n          fill: colors.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatRoom, \"OL8qX+YJlyjrJ+c1I4Zlg4tzjws=\", false, function () {\n  return [useLocation, useNavigate, useGlobalContext];\n});\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useRef","useState","css","useLocation","useNavigate","over","SockJS","v4","uuid","TopNavigation","ReactComponent","SendIcon","colors","commonStyle","useGlobalContext","Main","Message","Date","ChatApi","stompClient","ChatRoom","inputRef","message","setMessage","state","roomId","setRoomId","receiverId","setReceiverId","userId","setUserId","chats","setChats","navigate","sendChatHandler","console","log","chatMessage","senderId","send","JSON","stringify","current","focus","onMessageReceived","payload","payloadData","parse","body","push","onError","err","onConnected","subscribe","setHasBottom","fetchChatLogs","data","getChagLogs","findRoom","Sock","process","env","REACT_APP_SOCKET_URI","connect","connected","disconnect","map","chat","sendTime","isRead","bottomHeaderHeight","text","white","e","target","value"],"sources":["/Users/singco/dev/projects/S07P12C104/client/src/pages/Chat/ChatRoom.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { v4 as uuid } from 'uuid';\n\nimport TopNavigation from '../../components/Common/TopNavigation/TopNavigation';\nimport { ReactComponent as SendIcon } from '../../assets/send.svg';\nimport colors from '../../constants/colors';\nimport commonStyle from '../../constants/commonStyle';\nimport { useGlobalContext } from '../../contexts/GlobalContext';\nimport Main from '../../components/Common/Main/Main';\nimport Message from '../../components/Chat/Message';\nimport Date from '../../components/Chat/Date';\nimport * as ChatApi from '../../api/chat';\n\nlet stompClient = null;\nconst ChatRoom = () => {\n\tconst inputRef = useRef(null);\n\tconst [message, setMessage] = useState('');\n\tconst { state } = useLocation();\n\tconst [roomId, setRoomId] = useState(state.roomId);\n\tconst [receiverId, setReceiverId] = useState(state.receiverId);\n\t// todo: 유저정보 컨텍스트에서 가져와야함.\n\tconst [userId, setUserId] = useState('myId');\n\tconst [chats, setChats] = useState([]);\n\tconst navigate = useNavigate();\n\tconst sendChatHandler = () => {\n\t\tconsole.log('채팅전송개발중');\n\t\tif (stompClient) {\n\t\t\tconst chatMessage = {\n\t\t\t\tsenderId: userId,\n\t\t\t\treceiverId: receiverId,\n\t\t\t\troomId: roomId,\n\t\t\t\tmessage,\n\t\t\t};\n\t\t\tstompClient.send(`/app/chat/message`, {}, JSON.stringify(chatMessage));\n\t\t}\n\t\tsetMessage('');\n\t\tinputRef.current.focus();\n\t};\n\n\tconst onMessageReceived = payload => {\n\t\tlet payloadData = JSON.parse(payload.body);\n\t\tchats.push(payloadData);\n\t\tsetChats([...chats]);\n\t};\n\n\tconst onError = err => {\n\t\tconsole.log(err);\n\t\tthrow err;\n\t};\n\tconst onConnected = () => {\n\t\tconsole.log('연결완료');\n\t\tstompClient.subscribe(`/topic/chat/room/${roomId}`, onMessageReceived);\n\t};\n\n\tconst { setHasBottom } = useGlobalContext();\n\tuseEffect(() => {\n\t\tsetHasBottom(true);\n\t\treturn () => {\n\t\t\tsetHasBottom(false);\n\t\t};\n\t}, []);\n\n\t// roomId에 따라 채팅로그 받아오기\n\tuseEffect(() => {\n\t\tconst fetchChatLogs = async () => {\n\t\t\ttry {\n\t\t\t\tconst data = await ChatApi.getChagLogs(roomId);\n\t\t\t\tsetChats(data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t};\n\t\tconst findRoom = async () => {\n\t\t\ttry {\n\t\t\t\tconst { roomId } = await ChatApi.findRoom(receiverId);\n\t\t\t\tsetRoomId(roomId);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t};\n\t\tif (roomId) {\n\t\t\tfetchChatLogs();\n\t\t} else {\n\t\t\tfindRoom();\n\t\t}\n\t}, [roomId]);\n\n\t// 소켓연결\n\tuseEffect(() => {\n\t\tlet Sock = new SockJS(process.env.REACT_APP_SOCKET_URI);\n\t\tstompClient = over(Sock);\n\t\tstompClient.connect({}, onConnected, onError);\n\n\t\treturn () => {\n\t\t\tif (stompClient.connected) stompClient.disconnect();\n\t\t};\n\t}, []);\n\treturn (\n\t\t<>\n\t\t\t<TopNavigation backClick onBackClick={() => navigate(-1)} centerContent={receiverId} />\n\t\t\t<Main>\n\t\t\t\t{/* todo : 날짜 달라질떄 Date 컴포넌트 렌더링 필요 */}\n\t\t\t\t{chats.map(chat => (\n\t\t\t\t\t<Message\n\t\t\t\t\t\tkey={uuid()}\n\t\t\t\t\t\tmessage={chat.message}\n\t\t\t\t\t\tisMine={chat.senderId === userId}\n\t\t\t\t\t\tsendTime={chat.sendTime}\n\t\t\t\t\t\tisRead={chat.isRead}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</Main>\n\t\t\t<div\n\t\t\t\tclassName=\"input-wrapper\"\n\t\t\t\tcss={css`\n\t\t\t\t\tposition: fixed;\n\t\t\t\t\tbottom: 0;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tmax-width: 1200px;\n\t\t\t\t\theight: ${commonStyle.bottomHeaderHeight};\n\t\t\t\t\tbox-shadow: 0 -0.2px ${colors.text};\n\t\t\t\t\tbackground-color: ${colors.white};\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: center;\n\t\t\t\t\talign-items: center;\n\t\t\t\t`}\n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tvalue={message}\n\t\t\t\t\tonChange={e => setMessage(e.target.value)}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"메시지를 입력하세요\"\n\t\t\t\t\tcss={css`\n\t\t\t\t\t\twidth: 90%;\n\t\t\t\t\t\tpadding: 10px 45px 10px 10px;\n\t\t\t\t\t\tborder: 2px solid ${colors.text};\n\t\t\t\t\t\tfont-size: 16px;\n\t\t\t\t\t\tfont-family: 'Regular';\n\t\t\t\t\t\tborder-radius: 31px;\n\t\t\t\t\t\t&:active,\n\t\t\t\t\t\t&:focus {\n\t\t\t\t\t\t\toutline: none;\n\t\t\t\t\t\t}\n\t\t\t\t\t`}\n\t\t\t\t/>\n\t\t\t\t<div\n\t\t\t\t\tcss={css`\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tright: 5%;\n\t\t\t\t\t\tpadding: 10px;\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\tjustify-content: center;\n\t\t\t\t\t\talign-items: center;\n\t\t\t\t\t`}\n\t\t\t\t>\n\t\t\t\t\t<SendIcon onClick={sendChatHandler} width=\"28\" height=\"28\" fill={colors.text} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ChatRoom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}