{"ast":null,"code":"import * as authApi from '../api/auth';\nexport const checkSpecial = str => {\n  const regExp = /[!?@#$%^&*():;+-=~{}<>\\_\\[\\]\\|\\\\\\\"\\'\\,\\.\\/\\`\\₩]/g;\n  if (regExp.test(str)) return true;\n  return false;\n};\nexport const checkNum = str => {\n  const regExp = /[0-9]/g;\n  if (regExp.test(str)) return true;\n  return false;\n};\nexport const checkEmoji = str => {\n  const regExp = /([\\u2700-\\u27BF]|[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])/g;\n  if (regExp.test(str)) return true;\n  return false;\n};\nexport const checkSpace = str => {\n  if (str.search(/\\s/) !== -1) return true;\n  return false;\n};\nexport const checkLength = function (str) {\n  let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10000;\n\n  if (typeof str === 'string') {}\n\n  if (str.length >= start && str.length <= end) return true;\n  return false;\n};\nexport const validateDateOfBirth = dateOfBirth => {\n  if (checkLength(dateOfBirth)) return true;\n  return false;\n};\nexport const checkDuplicationNickName = async nickname => {\n  const {\n    isSuccess\n  } = await authApi.duplicationCheck(nickname);\n  return isSuccess;\n};\nexport const validateNickName = async nickName => {\n  if (checkSpecial(nickName) || checkSpace(nickName) || checkNum(nickName) || checkEmoji(nickName)) return {\n    state: false,\n    errMessage: '별명은 특수문자, 이모지, 숫자를 입력받을 수 없습니다.'\n  };\n  if (!checkLength(nickName, 2, 8)) return {\n    state: false,\n    errMessage: '별명은 2자 이상 8자 이하로 입력해주세요.'\n  };\n  const isDuplicationNickName = await checkDuplicationNickName(nickName);\n  if (isDuplicationNickName) return {\n    state: false,\n    errMessage: '이미 존재하는 별명입니다.'\n  };\n  return {\n    state: true\n  };\n};\nexport const validateHeight = height => {\n  if (checkLength(height) && height >= 90 && height <= 250) return true;\n  return false;\n};\nexport const validateWeight = weight => {\n  if (checkLength(weight) && weight >= 30 && weight <= 200) return true;\n  return false;\n};\nexport const validateFootSize = footSize => {\n  if (checkLength(footSize) && footSize >= 0 && footSize <= 350) return true;\n  return false;\n};\nexport const validateAllInput = async info => {\n  const {\n    state\n  } = await validateNickName(info.nickname);\n  return state && validateDateOfBirth(info.dateOfBirth) && validateHeight(info.height) && validateWeight(info.weight) && validateFootSize(info.footSize) ? true : false;\n};","map":{"version":3,"names":["authApi","checkSpecial","str","regExp","test","checkNum","checkEmoji","checkSpace","search","checkLength","start","end","length","validateDateOfBirth","dateOfBirth","checkDuplicationNickName","nickname","isSuccess","duplicationCheck","validateNickName","nickName","state","errMessage","isDuplicationNickName","validateHeight","height","validateWeight","weight","validateFootSize","footSize","validateAllInput","info"],"sources":["/Users/singco/dev/projects/S07P12C104/client/src/utils/validate.js"],"sourcesContent":["import * as authApi from '../api/auth';\n\nexport const checkSpecial = str => {\n\tconst regExp = /[!?@#$%^&*():;+-=~{}<>\\_\\[\\]\\|\\\\\\\"\\'\\,\\.\\/\\`\\₩]/g;\n\tif (regExp.test(str)) return true;\n\treturn false;\n};\n\nexport const checkNum = str => {\n\tconst regExp = /[0-9]/g;\n\tif (regExp.test(str)) return true;\n\treturn false;\n};\n\nexport const checkEmoji = str => {\n\tconst regExp =\n\t\t/([\\u2700-\\u27BF]|[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])/g;\n\tif (regExp.test(str)) return true;\n\treturn false;\n};\n\nexport const checkSpace = str => {\n\tif (str.search(/\\s/) !== -1) return true;\n\treturn false;\n};\n\nexport const checkLength = (str, start = 1, end = 10000) => {\n\tif (typeof str === 'string') {}\n\tif (str.length >= start && str.length <= end) return true;\n\treturn false;\n};\n\nexport const validateDateOfBirth = dateOfBirth => {\n\tif (checkLength(dateOfBirth)) return true;\n\treturn false;\n};\n\nexport const checkDuplicationNickName = async nickname => {\n\tconst { isSuccess } = await authApi.duplicationCheck(nickname);\n\treturn isSuccess;\n};\n\nexport const validateNickName = async nickName => {\n\tif (checkSpecial(nickName) || checkSpace(nickName) || checkNum(nickName) || checkEmoji(nickName))\n\t\treturn { state: false, errMessage: '별명은 특수문자, 이모지, 숫자를 입력받을 수 없습니다.' };\n\n\tif (!checkLength(nickName, 2, 8))\n\t\treturn { state: false, errMessage: '별명은 2자 이상 8자 이하로 입력해주세요.' };\n\n\tconst isDuplicationNickName = await checkDuplicationNickName(nickName);\n\tif (isDuplicationNickName) return { state: false, errMessage: '이미 존재하는 별명입니다.' };\n\n\treturn { state: true };\n};\n\nexport const validateHeight = height => {\n\tif (checkLength(height) && height >= 90 && height <= 250) return true;\n\treturn false;\n};\n\nexport const validateWeight = weight => {\n\tif (checkLength(weight) && weight >= 30 && weight <= 200) return true;\n\treturn false;\n};\n\nexport const validateFootSize = footSize => {\n\tif (checkLength(footSize) && footSize >= 0 && footSize <= 350) return true;\n\treturn false;\n};\n\nexport const validateAllInput = async info => {\n\tconst { state } = await validateNickName(info.nickname);\n\n\treturn state &&\n\t\tvalidateDateOfBirth(info.dateOfBirth) &&\n\t\tvalidateHeight(info.height) &&\n\t\tvalidateWeight(info.weight) &&\n\t\tvalidateFootSize(info.footSize)\n\t\t? true\n\t\t: false;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}